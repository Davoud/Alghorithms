[debug] 
[debug] Initial source changes: 
[debug] 	removed:Set(C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\Stack.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\Heap.scala)
[debug] 	added: Set(C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\stacks\Stack.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\stacks\LinkedListStack.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\stacks\ArrayListStack.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\heaps\HeapTest.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\heaps\MaxPQ.scala)
[debug] 	modified: Set(C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\practices.scala)
[debug] Invalidated products: Set(C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes\dataStructures\Node$.class, C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes\dataStructures\Node.class, C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes\dataStructures\MaxPQ.class, C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes\dataStructures\ArrayListStack.class, C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes\dataStructures\testHeap.class, C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes\dataStructures\QueueWithStacks.class, C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes\dataStructures\MaxPQ$.class, C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes\dataStructures\testHeap$.class, C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes\dataStructures\StackWithMax.class, C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes\dataStructures\Stack.class, C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes\dataStructures\LinkListStack.class)
[debug] External API changes: API Changes: Set()
[debug] Modified binary dependencies: Set()
[debug] Initial directly invalidated classes: Set(dataStructures.MaxPQ, dataStructures.ArrayListStack, dataStructures.Node, dataStructures.StackWithMax, dataStructures.Stack, dataStructures.QueueWithStacks, dataStructures.LinkListStack, dataStructures.testHeap)
[debug] 
[debug] Sources indirectly invalidated by:
[debug] 	product: Set(C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\Stack.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\practices.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\Heap.scala)
[debug] 	binary dep: Set()
[debug] 	external source: Set()
[debug] All initially invalidated classes: Set(dataStructures.MaxPQ, dataStructures.ArrayListStack, dataStructures.Node, dataStructures.StackWithMax, dataStructures.Stack, dataStructures.QueueWithStacks, dataStructures.LinkListStack, dataStructures.testHeap)
[debug] All initially invalidated sources:Set(C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\stacks\Stack.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\Stack.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\practices.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\Heap.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\stacks\LinkedListStack.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\stacks\ArrayListStack.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\heaps\HeapTest.scala, C:\Users\ndavo\Documents\coding\Algorithms\src\main\scala\dataStructures\heaps\MaxPQ.scala)
[info] Compiling 6 Scala sources to C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes ...
[debug] Getting org.scala-sbt:compiler-bridge_2.12:1.2.5:compile for Scala 2.12.7
[debug] Getting org.scala-sbt:compiler-bridge_2.12:1.2.5:compile for Scala 2.12.7
[debug] [zinc] Running cached compiler 4395ee75 for Scala compiler version 2.12.7
[debug] [zinc] The Scala compiler is invoked with:
[debug] 	-bootclasspath
[debug] 	C:\Users\ndavo\.sbt\boot\scala-2.12.7\lib\scala-library.jar
[debug] 	-classpath
[debug] 	C:\Users\ndavo\Documents\coding\Algorithms\target\scala-2.12\classes;C:\Users\ndavo\Documents\coding\Algorithms\lib\algs4.jar;C:\Users\ndavo\.ivy2\cache\org.typelevel\cats-core_2.12\jars\cats-core_2.12-1.4.0.jar;C:\Users\ndavo\.ivy2\cache\org.typelevel\cats-macros_2.12\jars\cats-macros_2.12-1.4.0.jar;C:\Users\ndavo\.ivy2\cache\org.typelevel\machinist_2.12\jars\machinist_2.12-0.6.5.jar;C:\Users\ndavo\.sbt\boot\scala-2.12.7\lib\scala-reflect.jar;C:\Users\ndavo\.ivy2\cache\org.typelevel\cats-kernel_2.12\jars\cats-kernel_2.12-1.4.0.jar;C:\Users\ndavo\.ivy2\cache\org.scalactic\scalactic_2.12\bundles\scalactic_2.12-3.0.5.jar
[debug] Scala compilation took 0.8544961 s
[info] Done compiling.
[debug] Invalidating (transitively) by inheritance from dataStructures.LinkListStack...
[debug] Initial set of included nodes: Set(dataStructures.LinkListStack)
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.LinkListStack)
[debug] Change NamesChange(dataStructures.LinkListStack,ModifiedNames(changes = UsedName(isEmpty,[Default]), UsedName(eq,[Default]), UsedName(push,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(dataStructures;LinkListStack;init;,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(pop,[Default]), UsedName(LinkListStack,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The dataStructures.LinkListStack has the following regular definitions changed:
[debug] 	UsedName(isEmpty,[Default]), UsedName(eq,[Default]), UsedName(push,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(dataStructures;LinkListStack;init;,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(pop,[Default]), UsedName(LinkListStack,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.LinkListStack)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] Invalidating (transitively) by inheritance from dataStructures.stacks.Stack...
[debug] Initial set of included nodes: Set(dataStructures.stacks.Stack)
[debug] Including dataStructures.stacks.LinkedListStack by dataStructures.stacks.Stack
[debug] Including dataStructures.stacks.ArrayListStack by dataStructures.stacks.Stack
[debug] Including dataStructures.StackWithMax by dataStructures.stacks.Stack
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.StackWithMax, dataStructures.stacks.ArrayListStack, dataStructures.stacks.Stack, dataStructures.stacks.LinkedListStack)
[debug] The following modified names cause invalidation of dataStructures.QueueWithStacks: Set(UsedName(isEmpty,[Default]), UsedName(push,[Default]), UsedName(Stack,[Default]), UsedName(pop,[Default]))
[debug] The following modified names cause invalidation of dataStructures.stacks.LinkedListStack: Set(UsedName(isEmpty,[Default]), UsedName(Stack,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]))
[debug] The following modified names cause invalidation of dataStructures.stacks.ArrayListStack: Set(UsedName(Stack,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]))
[debug] The following modified names cause invalidation of dataStructures.StackWithMax: Set(UsedName(isEmpty,[Default]), UsedName(push,[Default]), UsedName(Stack,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]))
[debug] The following modified names cause invalidation of dataStructures.QueueWithStacks: Set(UsedName(isEmpty,[Default]), UsedName(push,[Default]), UsedName(Stack,[Default]), UsedName(pop,[Default]))
[debug] The following modified names cause invalidation of dataStructures.StackWithMax: Set(UsedName(isEmpty,[Default]), UsedName(push,[Default]), UsedName(Stack,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]))
[debug] The following modified names cause invalidation of dataStructures.QueueWithStacks: Set(UsedName(isEmpty,[Default]), UsedName(push,[Default]), UsedName(Stack,[Default]), UsedName(pop,[Default]))
[debug] Change NamesChange(dataStructures.stacks.Stack,ModifiedNames(changes = UsedName(isEmpty,[Default]), UsedName(eq,[Default]), UsedName(push,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(Stack,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]))) invalidates 5 classes due to The dataStructures.stacks.Stack has the following regular definitions changed:
[debug] 	UsedName(isEmpty,[Default]), UsedName(eq,[Default]), UsedName(push,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(Stack,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.StackWithMax, dataStructures.stacks.ArrayListStack, dataStructures.stacks.Stack, dataStructures.stacks.LinkedListStack)
[debug] 	> 
[debug] 	> by member reference: Set(dataStructures.QueueWithStacks, dataStructures.stacks.LinkedListStack, dataStructures.stacks.ArrayListStack, dataStructures.StackWithMax)
[debug]         
[debug] Invalidating (transitively) by inheritance from dataStructures.stacks.LinkedListStack...
[debug] Initial set of included nodes: Set(dataStructures.stacks.LinkedListStack)
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.stacks.LinkedListStack)
[debug] The following modified names cause invalidation of dataStructures.StackWithMax: Set(UsedName(isEmpty,[Default]), UsedName(push,[Default]), UsedName(dataStructures;stacks;LinkedListStack;init;,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]), UsedName(LinkedListStack,[Default]))
[debug] The following modified names cause invalidation of dataStructures.QueueWithStacks: Set(UsedName(isEmpty,[Default]), UsedName(push,[Default]), UsedName(pop,[Default]), UsedName(LinkedListStack,[Default]))
[debug] Change NamesChange(dataStructures.stacks.LinkedListStack,ModifiedNames(changes = UsedName(isEmpty,[Default]), UsedName(eq,[Default]), UsedName(push,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(dataStructures;stacks;LinkedListStack;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(Node,[Default]), UsedName(LinkedListStack,[Default]))) invalidates 3 classes due to The dataStructures.stacks.LinkedListStack has the following regular definitions changed:
[debug] 	UsedName(isEmpty,[Default]), UsedName(eq,[Default]), UsedName(push,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(dataStructures;stacks;LinkedListStack;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(Node,[Default]), UsedName(LinkedListStack,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.stacks.LinkedListStack)
[debug] 	> 
[debug] 	> by member reference: Set(dataStructures.StackWithMax, dataStructures.QueueWithStacks)
[debug]         
[debug] Invalidating (transitively) by inheritance from dataStructures.ArrayListStack...
[debug] Initial set of included nodes: Set(dataStructures.ArrayListStack)
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.ArrayListStack)
[debug] Change NamesChange(dataStructures.ArrayListStack,ModifiedNames(changes = UsedName(isEmpty,[Default]), UsedName(eq,[Default]), UsedName(push,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(dataStructures;ArrayListStack;init;,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ArrayListStack,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The dataStructures.ArrayListStack has the following regular definitions changed:
[debug] 	UsedName(isEmpty,[Default]), UsedName(eq,[Default]), UsedName(push,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(dataStructures;ArrayListStack;init;,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ArrayListStack,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.ArrayListStack)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] Invalidating (transitively) by inheritance from dataStructures.stacks.LinkedListStack.Node...
[debug] Initial set of included nodes: Set(dataStructures.stacks.LinkedListStack.Node)
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.stacks.LinkedListStack.Node)
[debug] Change NamesChange(dataStructures.stacks.LinkedListStack.Node,ModifiedNames(changes = UsedName(productPrefix,[Default]), UsedName($init$,[Default]), UsedName(eq,[Default]), UsedName(value,[Default]), UsedName(productElement,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(next,[Default]), UsedName(unapply,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(copy$default$2,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(dataStructures;stacks;LinkedListStack;Node;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$1,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(Node,[Default]))) invalidates 1 classes due to The dataStructures.stacks.LinkedListStack.Node has the following regular definitions changed:
[debug] 	UsedName(productPrefix,[Default]), UsedName($init$,[Default]), UsedName(eq,[Default]), UsedName(value,[Default]), UsedName(productElement,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(next,[Default]), UsedName(unapply,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(copy$default$2,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(dataStructures;stacks;LinkedListStack;Node;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$1,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(Node,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.stacks.LinkedListStack.Node)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] Invalidating (transitively) by inheritance from dataStructures.Stack...
[debug] Initial set of included nodes: Set(dataStructures.Stack)
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.Stack)
[debug] Change NamesChange(dataStructures.Stack,ModifiedNames(changes = UsedName(isEmpty,[Default]), UsedName(eq,[Default]), UsedName(push,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(Stack,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The dataStructures.Stack has the following regular definitions changed:
[debug] 	UsedName(isEmpty,[Default]), UsedName(eq,[Default]), UsedName(push,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(Stack,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.Stack)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] Invalidating (transitively) by inheritance from dataStructures.heaps.MaxPQ...
[debug] Initial set of included nodes: Set(dataStructures.heaps.MaxPQ)
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.heaps.MaxPQ)
[debug] The following modified names cause invalidation of dataStructures.heaps.HeapTest: Set(UsedName(isEmpty,[Default]), UsedName(MaxPQ,[Default]), UsedName(insert,[Default]), UsedName(dataStructures;heaps;MaxPQ;init;,[Default]), UsedName(size,[Default]), UsedName(delMax,[Default]))
[debug] Change NamesChange(dataStructures.heaps.MaxPQ,ModifiedNames(changes = UsedName(isEmpty,[Default]), UsedName(MaxPQ,[Default]), UsedName(eq,[Default]), UsedName(max,[Default]), UsedName(swap,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(insert,[Default]), UsedName(clone,[Default]), UsedName(less,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(dataStructures;heaps;MaxPQ;init;,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(heap,[Default]), UsedName($isInstanceOf,[Default]), UsedName(size,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(delMax,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]))) invalidates 2 classes due to The dataStructures.heaps.MaxPQ has the following regular definitions changed:
[debug] 	UsedName(isEmpty,[Default]), UsedName(MaxPQ,[Default]), UsedName(eq,[Default]), UsedName(max,[Default]), UsedName(swap,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(insert,[Default]), UsedName(clone,[Default]), UsedName(less,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(dataStructures;heaps;MaxPQ;init;,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(heap,[Default]), UsedName($isInstanceOf,[Default]), UsedName(size,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(delMax,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.heaps.MaxPQ)
[debug] 	> 
[debug] 	> by member reference: Set(dataStructures.heaps.HeapTest)
[debug]         
[debug] Invalidating (transitively) by inheritance from dataStructures.testHeap...
[debug] Initial set of included nodes: Set(dataStructures.testHeap)
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.testHeap)
[debug] Change NamesChange(dataStructures.testHeap,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(testHeap,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Go,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The dataStructures.testHeap has the following regular definitions changed:
[debug] 	UsedName(eq,[Default]), UsedName(testHeap,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Go,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.testHeap)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] Invalidating (transitively) by inheritance from dataStructures.StackWithMax...
[debug] Initial set of included nodes: Set(dataStructures.StackWithMax)
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.StackWithMax)
[debug] Change NamesChange(dataStructures.StackWithMax,ModifiedNames(changes = UsedName(StackWithMax,[Default]))) invalidates 1 classes due to The dataStructures.StackWithMax has the following regular definitions changed:
[debug] 	UsedName(StackWithMax,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.StackWithMax)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] Invalidating (transitively) by inheritance from dataStructures.Node...
[debug] Initial set of included nodes: Set(dataStructures.Node)
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.Node)
[debug] Change NamesChange(dataStructures.Node,ModifiedNames(changes = UsedName(productPrefix,[Default]), UsedName($init$,[Default]), UsedName(eq,[Default]), UsedName(value,[Default]), UsedName(productElement,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(next,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(copy$default$2,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(dataStructures;Node;init;,[Default]), UsedName(hashCode,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$1,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(Node,[Default]))) invalidates 1 classes due to The dataStructures.Node has the following regular definitions changed:
[debug] 	UsedName(productPrefix,[Default]), UsedName($init$,[Default]), UsedName(eq,[Default]), UsedName(value,[Default]), UsedName(productElement,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(next,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(copy$default$2,[Default]), UsedName(##,[Default]), UsedName(productIterator,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(dataStructures;Node;init;,[Default]), UsedName(hashCode,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$1,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(Node,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.Node)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] Invalidating (transitively) by inheritance from dataStructures.MaxPQ...
[debug] Initial set of included nodes: Set(dataStructures.MaxPQ)
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.MaxPQ)
[debug] Change NamesChange(dataStructures.MaxPQ,ModifiedNames(changes = UsedName(isEmpty,[Default]), UsedName(MaxPQ,[Default]), UsedName(eq,[Default]), UsedName(dataStructures;MaxPQ;init;,[Default]), UsedName(max,[Default]), UsedName(swap,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(insert,[Default]), UsedName(clone,[Default]), UsedName(less,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(heap,[Default]), UsedName($isInstanceOf,[Default]), UsedName(size,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(delMax,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The dataStructures.MaxPQ has the following regular definitions changed:
[debug] 	UsedName(isEmpty,[Default]), UsedName(MaxPQ,[Default]), UsedName(eq,[Default]), UsedName(dataStructures;MaxPQ;init;,[Default]), UsedName(max,[Default]), UsedName(swap,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(insert,[Default]), UsedName(clone,[Default]), UsedName(less,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(heap,[Default]), UsedName($isInstanceOf,[Default]), UsedName(size,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(delMax,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.MaxPQ)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] Invalidating (transitively) by inheritance from dataStructures.stacks.ArrayListStack...
[debug] Initial set of included nodes: Set(dataStructures.stacks.ArrayListStack)
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.stacks.ArrayListStack)
[debug] The following modified names cause invalidation of dataStructures.QueueWithStacks: Set(UsedName(isEmpty,[Default]), UsedName(push,[Default]), UsedName(ArrayListStack,[Default]), UsedName(pop,[Default]), UsedName(dataStructures;stacks;ArrayListStack;init;,[Default]))
[debug] Change NamesChange(dataStructures.stacks.ArrayListStack,ModifiedNames(changes = UsedName(isEmpty,[Default]), UsedName(eq,[Default]), UsedName(push,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ArrayListStack,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]), UsedName(dataStructures;stacks;ArrayListStack;init;,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]))) invalidates 2 classes due to The dataStructures.stacks.ArrayListStack has the following regular definitions changed:
[debug] 	UsedName(isEmpty,[Default]), UsedName(eq,[Default]), UsedName(push,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ArrayListStack,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(pop,[Default]), UsedName(==,[Default]), UsedName(dataStructures;stacks;ArrayListStack;init;,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.stacks.ArrayListStack)
[debug] 	> 
[debug] 	> by member reference: Set(dataStructures.QueueWithStacks)
[debug]         
[debug] Invalidating (transitively) by inheritance from dataStructures.heaps.HeapTest...
[debug] Initial set of included nodes: Set(dataStructures.heaps.HeapTest)
[debug] Invalidated by transitive inheritance dependency: Set(dataStructures.heaps.HeapTest)
[debug] Change NamesChange(dataStructures.heaps.HeapTest,ModifiedNames(changes = UsedName(eq,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Go,[Default]), UsedName(asInstanceOf,[Default]), UsedName(HeapTest,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The dataStructures.heaps.HeapTest has the following regular definitions changed:
[debug] 	UsedName(eq,[Default]), UsedName($asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Go,[Default]), UsedName(asInstanceOf,[Default]), UsedName(HeapTest,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(!=,[Default]), UsedName(synchronized,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]).
[debug] 	> by transitive inheritance: Set(dataStructures.heaps.HeapTest)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] New invalidations:
[debug] 	Set(dataStructures.QueueWithStacks)
[debug] Initial set of included nodes: Set(dataStructures.QueueWithStacks)
[debug] Previously invalidated, but (transitively) depend on new invalidations:
[debug] 	Set()
[debug] All newly invalidated classes after taking into account (previously) recompiled classes:Set()
